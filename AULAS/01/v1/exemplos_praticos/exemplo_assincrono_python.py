#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemplo Pr√°tico: Requisi√ß√µes Ass√≠ncronas em Python

Este exemplo demonstra como fazer requisi√ß√µes HTTP ass√≠ncronas usando asyncio e aiohttp.
Em requisi√ß√µes ass√≠ncronas, o programa pode continuar executando outras tarefas
enquanto espera as respostas dos servidores.

Depend√™ncias necess√°rias:
    pip install aiohttp

Autor: Material Did√°tico - Arquitetura da Web
"""

import asyncio
import aiohttp
import time
from datetime import datetime


async def exemplo_requisicao_assincrona():
    """
    Demonstra uma requisi√ß√£o HTTP ass√≠ncrona simples.
    O programa n√£o bloqueia enquanto espera a resposta.
    """
    print("=" * 60)
    print("EXEMPLO 1: Requisi√ß√£o Ass√≠ncrona Simples")
    print("=" * 60)
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Iniciando requisi√ß√£o ass√≠ncrona...")
    
    async with aiohttp.ClientSession() as session:
        try:
            # Esta linha N√ÉO bloqueia outras opera√ß√µes
            print(f"[{datetime.now().strftime('%H:%M:%S')}] Fazendo requisi√ß√£o para JSONPlaceholder...")
            
            async with session.get('https://jsonplaceholder.typicode.com/posts/1') as resposta:
                print(f"[{datetime.now().strftime('%H:%M:%S')}] Resposta recebida!")
                
                if resposta.status == 200:
                    dados = await resposta.json()
                    print(f"‚úÖ Sucesso! Status: {resposta.status}")
                    print(f"üìÑ T√≠tulo: {dados['title']}")
                    print(f"üìù Conte√∫do: {dados['body'][:100]}...")
                    print(f"üë§ User ID: {dados['userId']}")
                else:
                    print(f"‚ùå Erro! Status: {resposta.status}")
                    
        except aiohttp.ClientError as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Requisi√ß√£o conclu√≠da.\n")


async def buscar_post(session, post_id):
    """
    Fun√ß√£o auxiliar para buscar um post espec√≠fico.
    """
    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'
    
    try:
        async with session.get(url) as resposta:
            if resposta.status == 200:
                dados = await resposta.json()
                return {
                    'id': dados['id'],
                    'titulo': dados['title'][:50] + '...',
                    'sucesso': True
                }
            else:
                return {
                    'id': post_id,
                    'erro': f'Status {resposta.status}',
                    'sucesso': False
                }
    except aiohttp.ClientError as e:
        return {
            'id': post_id,
            'erro': str(e),
            'sucesso': False
        }


async def exemplo_multiplas_requisicoes_assincronas():
    """
    Demonstra m√∫ltiplas requisi√ß√µes ass√≠ncronas executadas em paralelo.
    Todas as requisi√ß√µes s√£o iniciadas simultaneamente.
    """
    print("=" * 60)
    print("EXEMPLO 2: M√∫ltiplas Requisi√ß√µes Ass√≠ncronas (Paralelas)")
    print("=" * 60)
    
    post_ids = [1, 2, 3, 4, 5]
    
    inicio = time.time()
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Iniciando {len(post_ids)} requisi√ß√µes ass√≠ncronas em paralelo...")
    
    async with aiohttp.ClientSession() as session:
        # Cria todas as tarefas ass√≠ncronas
        tarefas = [buscar_post(session, post_id) for post_id in post_ids]
        
        # Executa todas as tarefas em paralelo
        resultados = await asyncio.gather(*tarefas)
    
    fim = time.time()
    tempo_total = fim - inicio
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Todas as requisi√ß√µes conclu√≠das!")
    
    print(f"\nüìä Resultados:")
    for resultado in resultados:
        if resultado['sucesso']:
            print(f"  ‚úÖ Post {resultado['id']}: {resultado['titulo']}")
        else:
            print(f"  ‚ùå Post {resultado['id']}: {resultado['erro']}")
    
    print(f"\n‚è±Ô∏è  Tempo total: {tempo_total:.2f} segundos")
    print(f"üìù Observa√ß√£o: As requisi√ß√µes foram executadas em PARALELO!")
    print(f"   Se fossem s√≠ncronas, levariam aproximadamente {len(post_ids)} vezes mais tempo.")
    print()


async def exemplo_com_timeout():
    """
    Demonstra como usar timeout em requisi√ß√µes ass√≠ncronas.
    """
    print("=" * 60)
    print("EXEMPLO 3: Requisi√ß√£o Ass√≠ncrona com Timeout")
    print("=" * 60)
    
    timeout = aiohttp.ClientTimeout(total=5)  # 5 segundos
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Fazendo requisi√ß√£o com timeout de 5 segundos...")
    
    async with aiohttp.ClientSession(timeout=timeout) as session:
        try:
            async with session.get('https://jsonplaceholder.typicode.com/posts/1') as resposta:
                print(f"[{datetime.now().strftime('%H:%M:%S')}] Resposta recebida dentro do timeout!")
                print(f"‚úÖ Status: {resposta.status}")
                
                dados = await resposta.json()
                print(f"üìÑ T√≠tulo: {dados['title']}")
                
        except asyncio.TimeoutError:
            print("‚ùå Timeout! A requisi√ß√£o demorou mais de 5 segundos.")
        except aiohttp.ClientError as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    print()


async def exemplo_com_headers_personalizados():
    """
    Demonstra como enviar headers personalizados em requisi√ß√µes ass√≠ncronas.
    """
    print("=" * 60)
    print("EXEMPLO 4: Requisi√ß√£o Ass√≠ncrona com Headers Personalizados")
    print("=" * 60)
    
    headers = {
        'User-Agent': 'Exemplo-Python-Assincrono/1.0',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] Enviando requisi√ß√£o com headers personalizados...")
    print("üìã Headers enviados:")
    for chave, valor in headers.items():
        print(f"  ‚Ä¢ {chave}: {valor}")
    
    async with aiohttp.ClientSession(headers=headers) as session:
        try:
            async with session.get('https://jsonplaceholder.typicode.com/posts/1') as resposta:
                print(f"\n[{datetime.now().strftime('%H:%M:%S')}] Resposta recebida!")
                print(f"‚úÖ Status: {resposta.status}")
                
                # Mostra alguns headers da resposta
                print("üìã Alguns headers da resposta:")
                headers_interessantes = ['content-type', 'server', 'date']
                for header in headers_interessantes:
                    if header in resposta.headers:
                        print(f"  ‚Ä¢ {header}: {resposta.headers[header]}")
                
        except aiohttp.ClientError as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    print()


async def tarefa_em_background():
    """
    Simula uma tarefa que executa em background enquanto as requisi√ß√µes acontecem.
    """
    for i in range(10):
        print(f"  üîÑ Tarefa em background executando... ({i+1}/10)")
        await asyncio.sleep(0.5)  # Simula trabalho
    print("  ‚úÖ Tarefa em background conclu√≠da!")


async def exemplo_nao_bloqueante():
    """
    Demonstra como opera√ß√µes ass√≠ncronas n√£o bloqueiam outras tarefas.
    """
    print("=" * 60)
    print("EXEMPLO 5: Demonstra√ß√£o de Opera√ß√£o N√£o-Bloqueante")
    print("=" * 60)
    
    print("üîÑ Este exemplo mostra como opera√ß√µes ass√≠ncronas permitem que outras")
    print("   tarefas sejam executadas simultaneamente.\n")
    
    async with aiohttp.ClientSession() as session:
        # Inicia a requisi√ß√£o e a tarefa em background simultaneamente
        print(f"[{datetime.now().strftime('%H:%M:%S')}] Iniciando requisi√ß√£o e tarefa em paralelo...")
        
        tarefa_requisicao = buscar_post(session, 1)
        tarefa_background = tarefa_em_background()
        
        # Executa ambas as tarefas em paralelo
        resultado_requisicao, _ = await asyncio.gather(tarefa_requisicao, tarefa_background)
        
        print(f"\n[{datetime.now().strftime('%H:%M:%S')}] Ambas as tarefas conclu√≠das!")
        
        if resultado_requisicao['sucesso']:
            print(f"üìÑ Post obtido: {resultado_requisicao['titulo']}")
        
    print("\nüìù Observa√ß√£o: A requisi√ß√£o e a tarefa em background executaram")
    print("   simultaneamente, demonstrando que opera√ß√µes ass√≠ncronas n√£o bloqueiam!")
    print()


async def comparacao_performance():
    """
    Compara a performance entre requisi√ß√µes s√≠ncronas simuladas e ass√≠ncronas reais.
    """
    print("=" * 60)
    print("EXEMPLO 6: Compara√ß√£o de Performance")
    print("=" * 60)
    
    post_ids = [1, 2, 3, 4, 5]
    
    # Simula√ß√£o de requisi√ß√µes s√≠ncronas (sequenciais)
    print("üêå Simulando requisi√ß√µes s√≠ncronas (sequenciais)...")
    inicio_sincrono = time.time()
    
    async with aiohttp.ClientSession() as session:
        for post_id in post_ids:
            resultado = await buscar_post(session, post_id)
            print(f"  ‚Ä¢ Post {post_id} processado")
    
    fim_sincrono = time.time()
    tempo_sincrono = fim_sincrono - inicio_sincrono
    
    # Requisi√ß√µes ass√≠ncronas (paralelas)
    print("\nüöÄ Executando requisi√ß√µes ass√≠ncronas (paralelas)...")
    inicio_assincrono = time.time()
    
    async with aiohttp.ClientSession() as session:
        tarefas = [buscar_post(session, post_id) for post_id in post_ids]
        resultados = await asyncio.gather(*tarefas)
        
        for resultado in resultados:
            print(f"  ‚Ä¢ Post {resultado['id']} processado")
    
    fim_assincrono = time.time()
    tempo_assincrono = fim_assincrono - inicio_assincrono
    
    # Compara√ß√£o
    print(f"\nüìä COMPARA√á√ÉO DE PERFORMANCE:")
    print(f"‚è±Ô∏è  Tempo s√≠ncrono (simulado):  {tempo_sincrono:.2f} segundos")
    print(f"‚è±Ô∏è  Tempo ass√≠ncrono:          {tempo_assincrono:.2f} segundos")
    print(f"üöÄ Speedup: {tempo_sincrono/tempo_assincrono:.2f}x mais r√°pido!")
    print()


async def main():
    """
    Fun√ß√£o principal que executa todos os exemplos ass√≠ncronos.
    """
    print("üåê EXEMPLOS DE REQUISI√á√ïES ASS√çNCRONAS EM PYTHON")
    print("=" * 60)
    print("Este script demonstra como funcionam as requisi√ß√µes HTTP ass√≠ncronas")
    print("usando asyncio e aiohttp do Python.")
    print("=" * 60)
    print()
    
    # Executa todos os exemplos
    await exemplo_requisicao_assincrona()
    await exemplo_multiplas_requisicoes_assincronas()
    await exemplo_com_timeout()
    await exemplo_com_headers_personalizados()
    await exemplo_nao_bloqueante()
    await comparacao_performance()
    
    print("=" * 60)
    print("üéì RESUMO DOS CONCEITOS APRENDIDOS:")
    print("=" * 60)
    print("‚úÖ Requisi√ß√µes ass√≠ncronas N√ÉO bloqueiam a execu√ß√£o do programa")
    print("‚úÖ Permitem execu√ß√£o paralela de m√∫ltiplas opera√ß√µes")
    print("‚úÖ Melhoram significativamente a performance")
    print("‚úÖ Ideais para aplica√ß√µes que fazem muitas requisi√ß√µes")
    print("‚úÖ Mant√™m interfaces de usu√°rio responsivas")
    print("‚ùå Mais complexas de implementar que requisi√ß√µes s√≠ncronas")
    print("‚ùå Requerem compreens√£o de conceitos de programa√ß√£o ass√≠ncrona")
    print()
    print("üí° CONCEITOS IMPORTANTES:")
    print("   ‚Ä¢ async/await: Sintaxe para programa√ß√£o ass√≠ncrona")
    print("   ‚Ä¢ asyncio.gather(): Executa m√∫ltiplas tarefas em paralelo")
    print("   ‚Ä¢ ClientSession: Gerencia conex√µes HTTP de forma eficiente")
    print("   ‚Ä¢ Timeouts: Evitam que opera√ß√µes travem indefinidamente")
    print("=" * 60)


if __name__ == "__main__":
    # Verifica se aiohttp est√° instalado
    try:
        import aiohttp
    except ImportError:
        print("‚ùå Erro: A biblioteca 'aiohttp' n√£o est√° instalada.")
        print("üí° Para instalar, execute: pip install aiohttp")
        exit(1)
    
    # Executa o programa principal
    asyncio.run(main())

